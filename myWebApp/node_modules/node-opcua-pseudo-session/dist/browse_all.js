"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.browseAll = void 0;
const node_opcua_status_code_1 = require("node-opcua-status-code");
function browseAll(session, nodesToBrowse) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(nodesToBrowse instanceof Array)) {
            return (yield browseAll(session, [nodesToBrowse]))[0];
        }
        if (nodesToBrowse.length === 0) {
            return [];
        }
        const results = yield session.browse(nodesToBrowse);
        for (const result of results) {
            if (result.statusCode === node_opcua_status_code_1.StatusCodes.BadNoContinuationPoints) {
                // there was not enough continuation points
            }
            let continuationPoint = result.continuationPoint;
            while (continuationPoint) {
                const broweResults = yield session.browseNext([result.continuationPoint], false);
                const broweResult = broweResults[0];
                result.references.push.apply(result.references, broweResult.references || []);
                continuationPoint = broweResult.continuationPoint;
            }
        }
        return results;
    });
}
exports.browseAll = browseAll;
//# sourceMappingURL=browse_all.js.map